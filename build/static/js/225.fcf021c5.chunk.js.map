{"version":3,"file":"static/js/225.fcf021c5.chunk.js","mappings":"+QA4IA,UA/HiB,WACf,OAAwBA,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAiB,IAA7C,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA8BJ,EAAAA,EAAAA,WAAkB,GAAhD,eAAOK,EAAP,KAAgBC,EAAhB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,yCAAG,oGACRC,EAAKN,EAASO,SAASC,MAAMC,EAAAA,GAAAA,EAAAA,SAAAA,OAA8B,MAAM,GADzD,kBAGWC,EAAAA,GAAAA,SAAqBJ,GAHhC,gBAGJK,EAHI,EAGJA,KACRlB,EAAQkB,GACJA,EAAKjB,QAAQC,EAAUgB,EAAKjB,QALpB,kDAOZI,GACEc,EAAAA,EAAAA,IAAgB,CACdC,QAAS,OACTC,YAAa,wDACbC,gBAAgB,EAChBC,UAAW,MACXC,OAAQ,WAbA,0DAAH,qDAkBbZ,GACD,GAAE,CAACL,EAAUF,IAEd,IAAMoB,EAAgB,yCAAG,gGACnBxB,EAAOyB,OAAOC,OAAS,GADJ,uBAErBtB,GACEc,EAAAA,EAAAA,IAAgB,CACdC,QAAS,SACTC,YAAa,wDACbC,gBAAgB,EAChBC,UAAW,MACXC,OAAQ,WARS,6BAalBzB,EAbkB,0EAeEkB,EAAAA,GAAAA,eAA2BlB,EAAKc,GAAI,CAAEZ,OAAAA,IAfxC,kBAebiB,KACRU,EAAAA,EAAuBnB,EAAUO,EAAAA,GAAAA,EAAAA,UAhBZ,mDAkBrBG,EAAAA,EAAAA,IAAgB,CACdC,QAAS,OACTC,YAAW,UAAE,KAAMQ,gBAAR,aAAE,EAAgBX,KAC7BK,UAAW,MACXD,gBAAgB,EAChBE,OAAQ,UAvBW,0DAAH,qDA4BtB,OACE,gBAAKM,UAAU,aAAf,SACG/B,IACC,iBAAK+B,UAAU,SAAf,WACE,gBAAKA,UAAU,6BAAf,UACE,gBAAIA,UAAU,+FAAd,UACGC,EAAAA,EAAUC,EAAAA,EAAKjC,EAAKkC,OACpBlC,EAAKkC,OAASD,EAAAA,EAAAA,WACb,iBAAMF,UAAU,OAAhB,2BAEA,iBAAMA,UAAU,OAAhB,gCAIN,gBAAKA,UAAU,OAAf,UACE,kBAAMA,UAAU,cAAhB,mBACW,MACT,iBAAMA,UAAU,6BAAhB,SACG/B,EAAKmC,OAAOC,UAAUC,OAAO,IAAKrC,EAAKmC,OAAOG,YACzC,IAJV,kBAKa,KACX,iBAAMP,UAAU,6BAAhB,SACGQ,IAAOvC,EAAKwC,WAAWC,OAAO,sBACzB,IARV,oCAYF,gBAAKV,UAAU,qBAAf,UACE,eAAGA,UAAU,0CAAb,oBACU/B,EAAK0C,cAGjB,gBAAKX,UAAU,qCAAf,UACE,cAAGA,UAAU,0BAAb,SAAwC/B,EAAKsB,iBAE/C,4BACE,SAAC,IAAD,CACEqB,KAAM,EACNC,MAAO1C,EACP2C,YAAY,8BACZC,SAAU,SAACC,GAAD,OAAO5C,EAAU4C,EAAEC,OAAOJ,MAA1B,EACVb,UAAS,UAAM3B,EAA8B,WAApB,mBACzB6C,QAAS,kBAAM5C,GAAW,EAAjB,EACT6C,OAAQ,kBAAM7C,GAAW,EAAjB,IAETL,EAAKmD,WACJ,kBAAMpB,UAAU,wBAAhB,WACE,iBAAMA,UAAU,6BAAhB,SACGQ,IAAOvC,EAAKmD,UAAUV,OAAO,sBAE/B,KAJH,sCAQF,SAAC,IAAD,CACEW,QAAS1B,EACT2B,SAAS,SACTnB,KAAK,UACLH,UAAU,mBAJZ,iCAaX,C","sources":["pages/IdeaEdit/IdeaEdit.tsx"],"sourcesContent":["import { Button } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { pathEnum } from \"../../enums\";\nimport { Idea, IdeaTexts } from \"../../enums/idea.enum\";\nimport { routeHelper } from \"../../helpers\";\nimport { useAppDispatch } from \"../../redux/hooks\";\nimport { setNotification } from \"../../redux/userSlice/notificationSlice\";\nimport { ideaService } from \"../../service\";\nimport { IdeaType } from \"../../types/idea-service.type\";\n\nconst IdeaEdit = () => {\n  const [idea, setIdea] = useState<IdeaType>();\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [isFocus, setIsFocus] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const getIdea = async () => {\n      const id = location.pathname.split(pathEnum.Path.USERIDEA.concat(\"/\"))[1];\n      try {\n        const { data } = await ideaService.ideaById(id);\n        setIdea(data);\n        if (data.answer) setAnswer(data.answer);\n      } catch (error) {\n        dispatch(\n          setNotification({\n            message: \"Hata\",\n            description: \"Aradığınız fikir bulunamadı.\",\n            isNotification: true,\n            placement: \"top\",\n            status: \"error\",\n          })\n        );\n      }\n    };\n    getIdea();\n  }, [location, dispatch]);\n\n  const handleIdeaUpdate = async () => {\n    if (answer.trim().length < 1) {\n      dispatch(\n        setNotification({\n          message: \"Dikkat\",\n          description: \"Yanıt alanını doldurmadınız.\",\n          isNotification: true,\n          placement: \"top\",\n          status: \"error\",\n        })\n      );\n      return;\n    }\n    if (!idea) return;\n    try {\n      const { data } = await ideaService.updateIdeaById(idea.id, { answer });\n      routeHelper.navigation(navigate, pathEnum.Path.USERIDEA);\n    } catch (error: any) {\n      setNotification({\n        message: \"Hata\",\n        description: error.response?.data,\n        placement: \"top\",\n        isNotification: true,\n        status: \"error\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-3 h-full\">\n      {idea && (\n        <div className=\"w-full\">\n          <div className=\"w-full flex justify-center\">\n            <h3 className=\"text-primary text-center font-semibold uppercase pb-2 w-full sm:w-1/2 border-b border-orange\">\n              {IdeaTexts[Idea[idea.type] as never]}\n              {idea.type === Idea.Complaint ? (\n                <span className=\"ml-3\">&#128553;</span>\n              ) : (\n                <span className=\"ml-3\">&#128522;</span>\n              )}\n            </h3>\n          </div>\n          <div className=\"mt-2\">\n            <span className=\"text-thirdy\">\n              &#x2022;{\"\\t\"}\n              <span className=\"text-primary font-semibold\">\n                {idea.userId.firstName.concat(\" \", idea.userId.lastName)}\n              </span>{\" \"}\n              tarafından{\" \"}\n              <span className=\"text-primary font-semibold\">\n                {moment(idea.createdAt).format(\"DD/MM/YYYY HH:mm\")}\n              </span>{\" \"}\n              tarihinde oluşturuldu.\n            </span>\n          </div>\n          <div className=\"ml-2 mt-2 border-b\">\n            <p className=\"text-secondary font-bold text-base mb-1\">\n              Konu : {idea.subject}\n            </p>\n          </div>\n          <div className=\"my-1 max-h-[300px] overflow-y-auto\">\n            <p className=\"indent-3 px-3 font-sans\">{idea.description}</p>\n          </div>\n          <div>\n            <TextArea\n              rows={4}\n              value={answer}\n              placeholder=\"Yanıtınız...\"\n              onChange={(e) => setAnswer(e.target.value)}\n              className={`${!isFocus ? \"!bg-transparent\" : \"bg-white\"}`}\n              onFocus={() => setIsFocus(true)}\n              onBlur={() => setIsFocus(false)}\n            />\n            {idea.answerAt && (\n              <span className=\"text-thirdy ml-1 mb-3\">\n                <span className=\"text-primary font-semibold\">\n                  {moment(idea.answerAt).format(\"DD/MM/YYYY HH:mm\")}\n                </span>\n                {\"\\t\"}\n                tarihinde yanıtlandı.\n              </span>\n            )}\n            <Button\n              onClick={handleIdeaUpdate}\n              htmlType=\"submit\"\n              type=\"primary\"\n              className=\"float-right mt-3\"\n            >\n              Yanıtla\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default IdeaEdit;\n"],"names":["useState","idea","setIdea","answer","setAnswer","isFocus","setIsFocus","dispatch","useAppDispatch","location","useLocation","navigate","useNavigate","useEffect","getIdea","id","pathname","split","pathEnum","ideaService","data","setNotification","message","description","isNotification","placement","status","handleIdeaUpdate","trim","length","routeHelper","response","className","IdeaTexts","Idea","type","userId","firstName","concat","lastName","moment","createdAt","format","subject","rows","value","placeholder","onChange","e","target","onFocus","onBlur","answerAt","onClick","htmlType"],"sourceRoot":""}