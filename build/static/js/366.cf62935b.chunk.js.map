{"version":3,"file":"static/js/366.cf62935b.chunk.js","mappings":"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","sources":["components/Message/Message.tsx","components/ChatArea/Chat.tsx","components/FollowerCard/FollowerCard.tsx","pages/Follow/Follow.tsx"],"sourcesContent":["import moment from \"moment\";\nimport React from \"react\";\nimport { useAppSelector } from \"../../redux/hooks\";\nimport { PropsType } from \"./message.config\";\n\nconst Message: React.FC<PropsType> = ({ message }) => {\n  const userState = useAppSelector((state) => state.user);\n\n  return (\n    <div\n      className={`w-full my-1 flex flex-row ${\n        message.senderId.id === userState.user.id\n          ? \"justify-end\"\n          : \"justify-start\"\n      }`}\n    >\n      <div\n        className={`relative p-1 px-2 pr-10 rounded-md bg-light max-w-[75%]`}\n      >\n        <span className=\"text-sm font-medium text-primary\">\n          {message.message}\n        </span>\n        <span className=\"absolute text-[0.65rem] text-thirdy right-1 bottom-1\">\n          {moment(message.date).format(\"HH:mm\")}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import { Input, Spin } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { api_url } from \"../../configs/url.config\";\nimport { gifs, icons } from \"../../constants\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { MessageType } from \"../../redux/types/chat.type\";\nimport { setNotification } from \"../../redux/userSlice/notificationSlice\";\nimport { chatService } from \"../../service\";\nimport Message from \"../Message/Message\";\nimport { PropsType } from \"./chat.config\";\n\nconst Chat: React.FC<PropsType> = ({\n  receiverUser,\n  roomId,\n  messages,\n  setMessages,\n}) => {\n  const socket = io(api_url);\n  const [message, setMessage] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const [messageEnd, setMessageEnd] = useState<HTMLDivElement | null>(null);\n  const [todayFirstMessage, setTodayFirstMessage] = useState<\n    MessageType | undefined\n  >();\n\n  const userState = useAppSelector((state) => state.user);\n  const notificationState = useAppSelector((state) => state.notification);\n\n  const dispatch = useAppDispatch();\n\n  const scrollToBottom = () => {\n    messageEnd?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const sendMessage = async () => {\n    if (!(message.trim().length < 1)) {\n      setLoading(true);\n      try {\n        const { data } = await chatService.sendMessage({\n          chatRoomId: roomId,\n          message: message.trim(),\n          receiverId: receiverUser.id,\n        });\n\n        setMessages([...messages, data]);\n        setMessage(\"\");\n      } catch (error) {\n        dispatch(\n          setNotification({\n            message: \"Hata Oluştu\",\n            description: \"Mesajınız gönderilemedi\",\n            placement: \"top\",\n            isNotification: true,\n            status: \"error\",\n          })\n        );\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n    if (messages && !todayFirstMessage) {\n      const currentDate = new Date();\n      const todayMessages = messages.filter(\n        (m) => new Date(m.date).getTime() > currentDate.setHours(0, 0, 0)\n      );\n      setTodayFirstMessage(todayMessages[0]);\n    }\n  }, [messages]);\n\n  useEffect(() => {\n    socket.connect();\n\n    socket.on(userState.user.id, (data: MessageType) => {\n      console.log(\"data : \", data);\n      setMessages([...messages, data]);\n    });\n\n    return () => {\n      console.log(\"return e girdi\");\n      socket.off(\"socket-message\");\n      socket.disconnect();\n    };\n  }, [socket]);\n\n  if (notificationState.isLoading)\n    return (\n      <div className=\"w-full h-full flex justify-center items-center\">\n        <img alt=\"\" src={gifs.ripple} />\n      </div>\n    );\n\n  return (\n    <div className=\" h-full w-full rounded-md p-4 overflow-y-auto\">\n      <div className=\"h-[70vh] overflow-y-auto flex flex-col\">\n        {messages &&\n          messages.map((msg) => {\n            if (todayFirstMessage && todayFirstMessage.id === msg.id) {\n              return (\n                <>\n                  <span className=\"w-full my-1 text-primary font-bold bg-slate-200 shadow-sm bg-opacity-50 px-5 py-2 rounded-xl text-center\">\n                    BUGÜN\n                  </span>\n                  <Message message={msg} key={msg.id} />\n                </>\n              );\n            }\n            return <Message message={msg} key={msg.id} />;\n          })}\n        <div\n          style={{ float: \"left\", clear: \"both\" }}\n          ref={(el) => setMessageEnd(el)}\n        />\n      </div>\n      <div className=\"w-full h-[6vh] flex flex-row justify-between items-center\">\n        <Input\n          className=\"!w-[calc(100%-50px)] py-4\"\n          value={message}\n          onChange={(event) => setMessage(event.target.value)}\n        />\n        {loading ? (\n          <Spin />\n        ) : (\n          <div\n            onClick={sendMessage}\n            className=\"w-11 h-11 flex justify-center items-center  rounded-full cursor-pointer\"\n          >\n            <img alt=\"send\" src={icons.send} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport { icons } from \"../../constants\";\nimport { PropsType } from \"./follower-card.config\";\n\nconst FollowerCard: React.FC<PropsType> = ({\n  follower,\n  selectedUser,\n  setSelectedUser,\n  roomId,\n  setSelectedRoomId,\n}) => {\n  return (\n    <div\n      onClick={() => {\n        setSelectedUser(follower);\n        setSelectedRoomId(roomId);\n      }}\n      className=\"w-full h-[90px] mb-5 px-4 bg-white rounded-md cursor-pointer\"\n    >\n      <div className=\"w-full h-full flex flex-row justify-between items-center\">\n        <div className=\"w-full h-full flex flex-row items-center\">\n          <div>\n            <img\n              src={\n                follower.profilePicture ? follower.profilePicture : icons.user\n              }\n              alt=\"\"\n              className=\"w-12 h-12 rounded-full object-cover shadow-md\"\n            />\n          </div>\n          <div className=\"flex flex-col ml-5\">\n            <span className=\"text-primary text-base drop-shadow-xl font-semibold\">\n              {follower.firstName.concat(\" \", follower.lastName)}\n            </span>\n            <span className=\"text-thirdy text-sm\">\n              {roomId ? \"mesajlaşmaya devam et...\" : \"mesajlaşma başlat...\"}\n            </span>\n          </div>\n        </div>\n        {selectedUser?.id === follower.id && (\n          <div className=\"\">\n            <img\n              alt=\"icon\"\n              src={icons.right_arrow}\n              className=\"transition-all duration-700\"\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FollowerCard;\n","import React, { useEffect, useState } from \"react\";\nimport Chat from \"../../components/ChatArea/Chat\";\nimport FollowerCard from \"../../components/FollowerCard/FollowerCard\";\nimport bgwp from \"../../assets/images/wp1.jpg\";\nimport { roleEnum } from \"../../enums\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { FollowType } from \"../../redux/types/user.types\";\nimport {\n  setIsLoading,\n  setNotification,\n} from \"../../redux/userSlice/notificationSlice\";\nimport { ChatRoomType, MessageType } from \"../../redux/types/chat.type\";\nimport { chatService } from \"../../service\";\nimport { Spin } from \"antd\";\n\nconst Follow = () => {\n  const [receiverUser, setSelectedUser] = useState<FollowType>();\n  const [chatRooms, setChatRooms] = useState<ChatRoomType[]>([]);\n  const [selectedRoomId, setSelectedRoomId] = useState<string | null>(null);\n  const [messages, setMessages] = useState<MessageType[]>([]);\n\n  const userState = useAppSelector((state) => state.user);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const getChatRooms = async () => {\n      try {\n        const { data } = await chatService.getRooms();\n        setChatRooms(data);\n      } catch (error) {\n        dispatch(\n          setNotification({\n            message: \"Hata Oluştu\",\n            description: \"Sohbet Odalarınız Yüklenemedi\",\n            isNotification: true,\n            placement: \"top\",\n            status: \"error\",\n          })\n        );\n      }\n    };\n\n    getChatRooms();\n  }, [dispatch]);\n\n  useEffect(() => {\n    const getMessagesFromChatRoom = async () => {\n      try {\n        dispatch(setIsLoading({ isLoading: true }));\n        const { data } = await chatService.getMessagesByRoomId(selectedRoomId!);\n        setMessages(data);\n      } catch (error) {\n        dispatch(\n          setNotification({\n            message: \"Hata Oluştu\",\n            description: `${receiverUser?.firstName} ile mesajlarınız yüklenemedi.`,\n            isNotification: true,\n            placement: \"top\",\n            status: \"error\",\n          })\n        );\n      } finally {\n        dispatch(setIsLoading({ isLoading: false }));\n      }\n    };\n    const createChatRoom = async () => {\n      if (receiverUser) {\n        try {\n          const { data } = await chatService.createRoom({\n            id: receiverUser.id,\n          });\n          setChatRooms([...chatRooms, data]);\n          setSelectedRoomId(data.id);\n        } catch (error: any) {\n          setNotification({\n            message: \"Beklenmeyen Hata\",\n            description: error.response?.data.message,\n            isNotification: true,\n            placement: \"top\",\n            status: \"error\",\n          });\n        }\n      }\n    };\n    if (selectedRoomId) {\n      getMessagesFromChatRoom();\n    } else {\n      createChatRoom();\n    }\n  }, [selectedRoomId, receiverUser, dispatch]);\n\n  const getChatUserRoomId = (follower: FollowType): string | null => {\n    if (userState.user.role === roleEnum.Role.Customer) {\n      const roomId = chatRooms.find((room) => room.sellerId.id === follower.id);\n      if (roomId) return roomId.id;\n    } else {\n      // seller user durumu\n      const roomId = chatRooms.find(\n        (room) => room.customerId.id === follower.id\n      );\n      if (roomId) return roomId.id;\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"w-full flex flex-row flex-wrap p-3\">\n      {/* takipçilerin listesi */}\n      <div className=\"w-full md:w-1/2 lg:w-1/3\">\n        <h3 className=\"text-primary font-bold text-lg\">\n          {userState.user.role === roleEnum.Role.Customer\n            ? \"TAKİP ETTİKLERİM\"\n            : \"TAKİPÇİLERİM\"}\n        </h3>\n        <div className=\"max-h-[80vh] overflow-y-auto\">\n          {userState.followers.map((follower) => {\n            const roomId = getChatUserRoomId(follower);\n            return (\n              <FollowerCard\n                key={follower.id}\n                selectedUser={receiverUser}\n                setSelectedUser={setSelectedUser}\n                follower={follower}\n                roomId={roomId}\n                setSelectedRoomId={setSelectedRoomId}\n              />\n            );\n          })}\n        </div>\n      </div>\n      {receiverUser && (\n        <div className=\"w-full p-0  md:px-4 md:w-1/2 lg:w-2/3 rounded-sm\">\n          <div className=\"w-full flex flex-row justify-between items-center px-2\">\n            <h3 className=\"text-xl text-primary font-bold\">\n              {receiverUser.firstName.concat(\" \", receiverUser.lastName)}\n            </h3>\n            <button\n              onClick={() => setSelectedUser(undefined)}\n              className=\"text-2xl\"\n            >\n              &#10005;\n            </button>\n          </div>\n          <div\n            className=\"w-full h-[80vh] rounded-sm\"\n            style={{\n              backgroundImage: `url(${bgwp})`,\n              backgroundRepeat: \"no-repeat\",\n              backgroundPosition: \"center\",\n              backgroundSize: \"cover\",\n            }}\n          >\n            {selectedRoomId ? (\n              <Chat\n                key={selectedRoomId}\n                roomId={selectedRoomId}\n                receiverUser={receiverUser}\n                messages={messages}\n                setMessages={setMessages}\n              />\n            ) : (\n              <div className=\"w-full h-full flex justify-center items-center\">\n                <Spin size=\"large\" />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Follow;\n"],"names":["message","userState","useAppSelector","state","user","className","senderId","id","moment","date","format","receiverUser","roomId","messages","setMessages","socket","io","api_url","useState","setMessage","loading","setLoading","messageEnd","setMessageEnd","todayFirstMessage","setTodayFirstMessage","notificationState","notification","dispatch","useAppDispatch","sendMessage","trim","length","chatService","chatRoomId","receiverId","data","setNotification","description","placement","isNotification","status","useEffect","scrollIntoView","behavior","currentDate","Date","todayMessages","filter","m","getTime","setHours","connect","on","console","log","off","disconnect","isLoading","alt","src","gifs","map","msg","style","float","clear","ref","el","value","onChange","event","target","onClick","icons","follower","selectedUser","setSelectedUser","setSelectedRoomId","profilePicture","firstName","concat","lastName","chatRooms","setChatRooms","selectedRoomId","getChatRooms","getMessagesFromChatRoom","setIsLoading","createChatRoom","response","role","roleEnum","followers","find","room","sellerId","customerId","getChatUserRoomId","undefined","backgroundImage","bgwp","backgroundRepeat","backgroundPosition","backgroundSize","size"],"sourceRoot":""}