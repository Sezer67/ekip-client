{"version":3,"file":"static/js/375.9201fcc4.chunk.js","mappings":"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","sources":["pages/Users/user.config.ts","pages/Users/User.tsx"],"sourcesContent":["import { Role, RoleText } from \"../../enums/role.enum\";\n\nexport const colors = [\"bg-pink\", \"bg-primary\", \"bg-thirdy\"];\nexport const textColors = [\"text-primary\", \"text-light\", \"text-primary\"];\n\nexport const RoleFilterStatus = [\n  {\n    text: RoleText.customer,\n    value: Role.Customer,\n  },\n  {\n    text: RoleText.seller,\n    value: Role.Seller,\n  },\n];\n","import { Table, Tooltip } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport React, { useEffect } from \"react\";\nimport { axiosInstance } from \"../../axios.util\";\nimport { api_url } from \"../../configs/url.config\";\nimport { gifs, icons } from \"../../constants\";\nimport { Role, RoleText } from \"../../enums/role.enum\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { UserType } from \"../../redux/types/user.types\";\nimport { setIsLoading } from \"../../redux/userSlice/notificationSlice\";\nimport { setAllUsers, updateUserById } from \"../../redux/userSlice/userSlice\";\nimport { userService } from \"../../service\";\nimport { colors, RoleFilterStatus, textColors } from \"./user.config\";\n\nconst User = () => {\n  const userState = useAppSelector((state) => state.user);\n  const loading = useAppSelector((state) => state.notification.isLoading);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const getAllUsers = async () => {\n      try {\n        dispatch(setIsLoading({ isLoading: true }));\n        const { data } = await axiosInstance.get(`${api_url}/user/all`);\n        dispatch(setAllUsers(data));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        dispatch(setIsLoading({ isLoading: false }));\n      }\n    };\n    getAllUsers();\n  }, [dispatch]);\n\n  const handleFreeze = async (id: string, isFreeze: boolean) => {\n    try {\n      const { data } = await userService.updateUser(id, { isFreeze });\n      dispatch(updateUserById({ id, isFreeze }));\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const columns: ColumnsType<UserType> = [\n    {\n      title: \"PP\",\n      dataIndex: \"profilePicture\",\n      key: \"profilePicture\",\n      render: (value: string | null) => {\n        const random = Math.floor(Math.random() * 3);\n        return (\n          <div\n            className={`${colors[random]} w-8 h-8 rounded-full flex justify-center items-center ${textColors[random]}`}\n          >\n            {value ? (\n              <img\n                alt=\"img\"\n                src={value}\n                className=\"w-8 h-8 rounded-full object-cover\"\n              />\n            ) : (\n              <span>{userState.user.firstName.charAt(0).toUpperCase()}</span>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      title: \"Kullanıcı Adı\",\n      dataIndex: \"username\",\n      key: \"username\",\n      render: (value: string) => (\n        <span className=\"text-primary text-base font-semibold\">{value}</span>\n      ),\n    },\n    {\n      title: \"Ad Soyad\",\n      dataIndex: \"firstName\",\n      key: \"firstName\",\n      render: (value: string, record: UserType) => (\n        <span className=\"text-primary text-base font-semibold\">\n          {value.concat(\" \", record.lastName)}\n        </span>\n      ),\n    },\n    {\n      title: \"Mail\",\n      dataIndex: \"email\",\n      key: \"email\",\n      render: (value: string) => <span className=\"text-primary\">{value}</span>,\n    },\n    {\n      title: \"Hesap Tipi\",\n      dataIndex: \"role\",\n      key: \"role\",\n      render: (value: Role) => (\n        <div className=\"w-full flex justify-center items-center\">\n          <span\n            className={`text-primary w-[80px] text-center px-2 py-1 border ${\n              value === Role.Customer\n                ? \"bg-blue-200 border-blue-300 \"\n                : \"bg-red-300 border-red-400\"\n            }`}\n          >\n            {RoleText[value as never]}\n          </span>\n        </div>\n      ),\n      filters: RoleFilterStatus,\n      onFilter: (value, record) => record.role === value,\n    },\n    {\n      title: \"Bakiye\",\n      dataIndex: \"balance\",\n      key: \"balance\",\n      render: (value: number) => (\n        <span className=\"text-primary\">{value} ₺</span>\n      ),\n      sorter: (a, b) => a.balance - b.balance,\n    },\n    {\n      title: \"\",\n      dataIndex: \"actions\",\n      key: \"actions\",\n      render: (_, record) => (\n        <div className=\"flex flex-row\">\n          {record.isFreeze ? (\n            <div\n              onClick={() => handleFreeze(record.id, !record.isFreeze)}\n              className=\"cursor-pointer w-6 h-6\"\n            >\n              <Tooltip title=\"Hesabı Aktif Et\">\n                <img src={icons.not_freeze} alt=\"freeze\" />\n              </Tooltip>\n            </div>\n          ) : (\n            <div\n              onClick={() => handleFreeze(record.id, !record.isFreeze)}\n              className=\"cursor-pointer w-6 h-6\"\n            >\n              <Tooltip title=\"Hesabı Dondur\">\n                <img src={icons.freeze} alt=\"freeze\" />\n              </Tooltip>\n            </div>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  if (loading)\n    return (\n      <div className=\"w-full h-full flex justify-center items-center\">\n        <img alt=\"\" src={gifs.ripple} />\n      </div>\n    );\n\n  return (\n    <div className=\"p-3\">\n      <div className=\"w-full\">\n        <Table\n          locale={{\n            triggerAsc: \"Artan Sıralama\",\n            triggerDesc: \"Azalan Sıralama\",\n            cancelSort: \"Sıralamayı İptal Et\",\n            filterReset: false,\n            filterConfirm: \"Uygula\",\n          }}\n          scroll={{ x: true }}\n          className=\"w-full\"\n          columns={columns}\n          dataSource={userState.allUsers}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n"],"names":["colors","textColors","RoleFilterStatus","text","RoleText","value","Role","userState","useAppSelector","state","user","loading","notification","isLoading","dispatch","useAppDispatch","useEffect","getAllUsers","setIsLoading","axiosInstance","api_url","data","setAllUsers","console","log","handleFreeze","id","isFreeze","userService","updateUserById","columns","title","dataIndex","key","render","random","Math","floor","className","alt","src","firstName","charAt","toUpperCase","record","concat","lastName","filters","onFilter","role","sorter","a","b","balance","_","onClick","icons","gifs","locale","triggerAsc","triggerDesc","cancelSort","filterReset","filterConfirm","scroll","x","dataSource","allUsers"],"sourceRoot":""}