{"version":3,"file":"static/js/430.cce2b4d8.chunk.js","mappings":"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","sources":["components/Loading/Loading.tsx","components/ProductForm/product-form.config.ts","components/ProductForm/ProductForm.tsx","helpers/image.helper.ts","pages/EditProduct/EditProduct.tsx"],"sourcesContent":["import { Spin } from \"antd\";\nimport React from \"react\";\n\nconst Loading: React.FC<{ loading: boolean }> = ({ loading }) => {\n  if (loading) {\n    return (\n      <div className=\"absolute w-full h-[100vh] flex justify-center items-center z-50 bg-transparent\">\n        <Spin size=\"large\" />\n      </div>\n    );\n  } else {\n    return <></>;\n  }\n};\n\nexport default Loading;\n","export type PropType = {\n  isEdit: boolean;\n};\n\nexport type FormDataType = {\n  name: string;\n  price: number;\n  stock: number;\n  images: any[];\n  categories: SelectType[];\n  description: string;\n};\ntype SelectType = {\n  key: string;\n  label: string;\n  value: string;\n};\nexport const FormDataVariables = {\n  names: {\n    name: {\n      label: \"Ürün Adı\",\n      name: \"name\",\n    },\n    price: {\n      label: \"Ürün Fiyatı\",\n      name: \"price\",\n    },\n    stock: {\n      label: \"Stok\",\n      name: \"stock\",\n    },\n    images: {\n      label: \"Görseller\",\n      name: \"images\",\n    },\n    categories: {\n      label: \"Hangi Kategoriye/Kategorilere Ait\",\n      name: \"categories\",\n    },\n    descriptionn: {\n      label: \"Ürün Hakkında\",\n      name: \"description\",\n    },\n  },\n  rules: {\n    name: {\n      message: \"Ürün Adı Zorunludur!\",\n    },\n    price: {\n      message: \"Fiyat Girmek Zorunludur!\",\n    },\n    stock: {\n      message: \"Stok Adedi Zorunludur!\",\n    },\n    categories: {\n      message: \"Kategori Seçmediniz!\",\n    },\n  },\n};\n","import {\n  Button,\n  DatePicker,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Select,\n  Spin,\n  Upload,\n  UploadFile,\n  UploadProps,\n} from \"antd\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { icons } from \"../../constants\";\nimport { imageHelper } from \"../../helpers\";\nimport { addCategory } from \"../../redux/categorySlice/categorySlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { setSelectedProduct } from \"../../redux/productSlice/productSlice\";\nimport { setNotification } from \"../../redux/userSlice/notificationSlice\";\nimport { categoryService, productService } from \"../../service\";\nimport {\n  CreateProductType,\n  UpdateProductType,\n} from \"../../types/product-service.type\";\nimport Loading from \"../Loading/Loading\";\nimport {\n  FormDataType,\n  FormDataVariables,\n  PropType,\n} from \"./product-form.config\";\n\nconst ProductForm: React.FC<PropType> = ({ isEdit }) => {\n  const [imageList, setImageList] = useState<UploadFile[]>([]);\n  const [selectImage, setSelectImage] = useState<{\n    url: string;\n    visible: boolean;\n  }>({ url: \"\", visible: false });\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [newCategoryVisible, setNewCategoryVisible] = useState<boolean>(false);\n  const [newCategory, setNewCategory] = useState<string>(\"\");\n  const [form] = Form.useForm();\n\n  const selectedProduct = useAppSelector(\n    (state) => state.product.selectedProduct\n  );\n  const categoryState = useAppSelector((state) => state.category.initialState);\n\n  const location = useLocation();\n  const dispatch = useAppDispatch();\n\n  const handleImageChange: UploadProps[\"onChange\"] = ({ fileList }) => {\n    fileList.forEach((a) => (a.status = \"success\"));\n    setImageList(fileList);\n  };\n\n  useEffect(() => {\n    const getProductById = async (id: string) => {\n      const { data } = await productService.getProductById(id);\n      dispatch(setSelectedProduct(data));\n      setIsLoading(false);\n    };\n\n    if (!selectedProduct.id) {\n      setIsLoading(true);\n      const productId = location.pathname.split(\"product/edit/\")[1];\n      getProductById(productId);\n    }\n  }, [selectedProduct, dispatch, location.pathname]);\n\n  const handleSave = async (values: FormDataType) => {\n    // loading\n    setIsLoading(true);\n    let imageUrls: string[] = [];\n    let categoryIds: string[] = [];\n    for await (const image of imageList) {\n      if (image.originFileObj) {\n        const uri = await imageHelper.fileToDataUri(image.originFileObj);\n        imageUrls.push(uri.split(\"base64,\")[1]);\n      }\n    }\n\n    values.categories.forEach((option, index) => {\n      if (option.value) categoryIds.push(option.value);\n      else categoryIds.push(option as never);\n    });\n    const formData: CreateProductType = {\n      categories: categoryIds,\n      name: values.name,\n      images: imageUrls.length > 0 ? imageUrls : null,\n      price: Number(values.price),\n      stock: Number(values.stock),\n      description: values.description.trim(),\n    };\n\n    try {\n      if (isEdit) {\n        const editFormData: UpdateProductType = {\n          ...formData,\n        };\n        if (selectedProduct.images) {\n          selectedProduct.images.forEach((uri) => {\n            imageUrls.push(uri);\n          });\n        }\n\n        if (imageUrls.length > 0) {\n          editFormData.images = imageUrls;\n        }\n        const { data } = await productService.updateProductById(\n          selectedProduct.id,\n          editFormData\n        );\n        dispatch(setSelectedProduct(data));\n      } else {\n        const { data } = await productService.createProdutc(formData);\n      }\n      dispatch(\n        setNotification({\n          isNotification: true,\n          message: \"İşlem Başarılı\",\n          description: isEdit\n            ? \"Ürün Güncellemesi Başarılı\"\n            : \"Yeni ürününüz satışa sunuldu\",\n          placement: \"top\",\n          status: \"success\",\n        })\n      );\n      if (!isEdit) {\n        form.resetFields();\n      }\n    } catch (error: any) {\n      dispatch(\n        setNotification({\n          isNotification: true,\n          message: \"İşlem Başarısız\",\n          description: error.message,\n          placement: \"top\",\n          status: \"error\",\n        })\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleNewCategory = async () => {\n    if (newCategoryVisible) {\n      if (newCategory.trim().length < 1) return;\n      try {\n        // new category added db\n        const { data } = await categoryService.addCategory({\n          name: newCategory.trim(),\n        });\n        // added state\n        dispatch(addCategory(data));\n        // close input\n        setNewCategoryVisible(false);\n      } catch (error: any) {\n        dispatch(\n          setNotification({\n            isNotification: true,\n            message: \"İşlem Başarısız\",\n            description: \"\",\n            placement: \"top\",\n            status: \"error\",\n          })\n        );\n      }\n    } else {\n      setNewCategoryVisible(true);\n    }\n  };\n\n  if (isEdit && !selectedProduct.id) {\n    return <Loading loading={isLoading} />;\n  }\n\n  return (\n    <div className=\"relative\">\n      <Form\n        layout=\"vertical\"\n        onFinish={handleSave}\n        form={form}\n        initialValues={{\n          name: isEdit ? selectedProduct.name : undefined,\n          price: isEdit ? selectedProduct.price : undefined,\n          stock: isEdit ? selectedProduct.stock : undefined,\n          description: isEdit ? selectedProduct.description : undefined,\n          categories: isEdit ? selectedProduct.categories : [],\n        }}\n      >\n        {isEdit &&\n        selectedProduct.images &&\n        selectedProduct.images.length >= 4 ? null : (\n          <Form.Item\n            label={FormDataVariables.names.images.label}\n            name={FormDataVariables.names.images.name}\n          >\n            <Upload\n              action=\"/\"\n              listType=\"picture-card\"\n              fileList={imageList}\n              onChange={handleImageChange}\n              onPreview={(file) =>\n                setSelectImage({ url: file.thumbUrl || \"\", visible: true })\n              }\n              className=\"bg-transparent\"\n            >\n              {isEdit && selectedProduct.images ? (\n                selectedProduct.images?.length + imageList.length >=\n                4 ? null : (\n                  <img src={icons.image} alt=\"icon\" />\n                )\n              ) : imageList.length >= 4 ? null : (\n                <img src={icons.image} alt=\"icon\" />\n              )}\n            </Upload>\n          </Form.Item>\n        )}\n        <Form.Item\n          rules={[\n            { required: true, message: FormDataVariables.rules.name.message },\n          ]}\n          label={FormDataVariables.names.name.label}\n          name={FormDataVariables.names.name.name}\n        >\n          <Input autoComplete=\"off\" className=\"max-w-[500px]\" />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            { required: true, message: FormDataVariables.rules.price.message },\n          ]}\n          label={FormDataVariables.names.price.label}\n          name={FormDataVariables.names.price.name}\n        >\n          <InputNumber\n            stringMode\n            min={0}\n            className=\"w-full sm:w-[500px]\"\n            addonAfter=\"₺\"\n          />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            { required: true, message: FormDataVariables.rules.stock.message },\n          ]}\n          label={FormDataVariables.names.stock.label}\n          name={FormDataVariables.names.stock.name}\n        >\n          <Input\n            type=\"number\"\n            min={1}\n            className=\"max-w-[500px]\"\n            addonAfter=\"adet\"\n          />\n        </Form.Item>\n        <Form.Item\n          label={FormDataVariables.names.descriptionn.label}\n          name={FormDataVariables.names.descriptionn.name}\n        >\n          <Input.TextArea\n            rows={4}\n            maxLength={5000}\n            className=\"!max-w-[500px]\"\n          />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            {\n              required: true,\n              message: FormDataVariables.rules.categories.message,\n            },\n          ]}\n          label={FormDataVariables.names.categories.label}\n          name={FormDataVariables.names.categories.name}\n        >\n          <Select\n            defaultValue={isEdit ? selectedProduct.categories : []}\n            labelInValue\n            mode=\"multiple\"\n            className=\"max-w-[500px]\"\n          >\n            {categoryState.map((option) => (\n              <Select.Option key={option.id}>{option.name}</Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <div className=\"max-w-[500px] mb-4 flex flex-row items-center space-x-4\">\n          {newCategoryVisible && (\n            <Input\n              className=\"max-w-[500px]\"\n              value={newCategory}\n              onChange={(e) => setNewCategory(e.target.value)}\n            />\n          )}\n\n          <Button className=\"m-0\" onClick={handleNewCategory}>\n            {newCategoryVisible ? \"\" : \"Yeni \"}Oluştur\n          </Button>\n        </div>\n        {isEdit && (\n          <>\n            <Form.Item label=\"Tıklanma Sayısı\">\n              <Input\n                disabled\n                value={selectedProduct.showCount}\n                className=\"max-w-[500px]\"\n              />\n            </Form.Item>\n            <Form.Item label=\"Satışa Sunulduğu Tarih\">\n              <Input\n                className=\"max-w-[500px]\"\n                disabled\n                value={moment(selectedProduct.createdAt.toString()).format(\n                  \"DD/MM/YYYY HH:mm\"\n                )}\n              />\n            </Form.Item>\n          </>\n        )}\n        <Form.Item className=\"max-w-[500px] flex flex-row justify-end \">\n          <Button type=\"primary\" htmlType=\"submit\">\n            Kaydet\n          </Button>\n        </Form.Item>\n      </Form>\n      <Modal\n        visible={selectImage.visible}\n        footer={null}\n        title={null}\n        onCancel={() => setSelectImage({ url: \"\", visible: false })}\n        width={500}\n        bodyStyle={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <img\n          src={selectImage.url}\n          alt=\"clicked-img\"\n          className=\"object-contain\"\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default ProductForm;\n","export const fileToDataUri = (file: File): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      resolve(event.target?.result as string);\n    };\n    reader.onerror = (error) => {\n      reject(error);\n    };\n    reader.readAsDataURL(file);\n  });\n\nexport const getBase64 = (url: string): string => {\n  return \"data:image/png;base64,\" + url;\n};\n","import { Carousel } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport Slider, { Settings } from \"react-slick\";\nimport ProductForm from \"../../components/ProductForm/ProductForm\";\nimport { icons } from \"../../constants\";\nimport { imageHelper } from \"../../helpers\";\nimport { useAppSelector } from \"../../redux/hooks\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst EditProduct = () => {\n  const productState = useAppSelector((state) => state.product);\n  const settings: Settings = {\n    accessibility: false,\n    arrows: false,\n    dots: true,\n    fade: true,\n    autoplay: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    centerMode: true,\n  };\n  return (\n    <div className=\"p-3 flex-col\">\n      <div className=\"flex flex-row flex-wrap justify-between\">\n        <div className=\"w-full md:max-w-[500px]\">\n          <ProductForm isEdit />\n        </div>\n        <div className=\"container px-auto my-auto h-auto lg:w-[calc(100%-800px)] \">\n          {productState.selectedProduct.images && (\n            <Slider {...settings}>\n              {productState.selectedProduct.images.map((uri) => (\n                <div>\n                  <img alt=\"\" src={imageHelper.getBase64(uri)} />\n                </div>\n              ))}\n            </Slider>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditProduct;\n"],"names":["loading","className","size","FormDataVariables","name","label","price","stock","images","categories","descriptionn","message","isEdit","useState","imageList","setImageList","url","visible","selectImage","setSelectImage","isLoading","setIsLoading","newCategoryVisible","setNewCategoryVisible","newCategory","setNewCategory","Form","form","selectedProduct","useAppSelector","state","product","categoryState","category","initialState","location","useLocation","dispatch","useAppDispatch","useEffect","getProductById","id","productService","data","setSelectedProduct","pathname","split","handleSave","values","imageUrls","categoryIds","image","originFileObj","imageHelper","uri","push","forEach","option","index","value","formData","length","Number","description","trim","editFormData","setNotification","isNotification","placement","status","resetFields","handleNewCategory","categoryService","addCategory","layout","onFinish","initialValues","undefined","action","listType","fileList","onChange","a","onPreview","file","thumbUrl","src","icons","alt","rules","required","autoComplete","stringMode","min","addonAfter","type","rows","maxLength","defaultValue","labelInValue","mode","map","e","target","onClick","disabled","showCount","moment","createdAt","toString","format","htmlType","footer","title","onCancel","width","bodyStyle","display","justifyContent","alignItems","fileToDataUri","Promise","resolve","reject","reader","FileReader","onload","event","result","onerror","error","readAsDataURL","getBase64","productState","accessibility","arrows","dots","fade","autoplay","speed","slidesToShow","slidesToScroll","centerMode"],"sourceRoot":""}