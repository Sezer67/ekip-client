{"version":3,"file":"static/js/799.b9778bee.chunk.js","mappings":"yRAiJA,UAlIkB,WAChB,OAAkCA,EAAAA,EAAAA,UAAqB,IAAvD,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAUC,EAAAA,EAAAA,KAAe,SAACC,GAAD,OAAWA,EAAMC,aAAaC,SAA9B,IAEzBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,yCAAG,2GAEhBL,GAASM,EAAAA,EAAAA,IAAa,CAAEP,WAAW,KAFnB,SAGOQ,EAAAA,GAAAA,WAHP,gBAGRC,EAHQ,EAGRA,KACRd,EAAac,GAJG,gDAMhBC,QAAQC,IAAR,MANgB,yBAQhBV,GAASM,EAAAA,EAAAA,IAAa,CAAEP,WAAW,KARnB,4EAAH,qDAWjBM,GACD,GAAE,IAEH,IAIMM,EAAiC,CACrC,CACEC,MAAO,MACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OACN,iBAAMC,UAAU,6BAAhB,SACGC,EAAAA,EAAUC,EAAAA,EAAKH,KAFZ,GAMV,CACEJ,MAAO,OACPC,UAAW,UACXC,IAAK,SACLC,OAAQ,SAACC,GAAD,OACN,0BACGA,EAAMI,OAAS,GAAKJ,EAAMK,UAAU,EAAG,IAAIC,OAAO,OAASN,GAFxD,GAMV,CACEJ,MAAO,eACPC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACC,GAAD,OACN,0BAAOA,EAAMO,UAAUD,OAAO,IAAKN,EAAMQ,WADnC,GAIV,CACEZ,MAAO,qBACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACC,GAAD,OACN,iBAAMC,UAAU,sBAAhB,SACGQ,IAAOT,GAAOU,OAAO,qBAFlB,GAMV,CACEd,MAAO,aACPC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACC,GAAD,OACN,gCAAQA,EAAQ,uBAAe,yBAA/B,MADM,GAIV,CACEJ,MAAO,oBACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACC,GAAD,OACN,gBAAKC,UAAU,0CAAf,UACE,4BACG,IACAD,EAAK,UAAMS,IAAOT,GAAOU,OAAO,qBAAwB,IAAK,QAJ5D,GASV,CACEd,MAAO,GACPC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACY,EAAGC,GAAJ,OACN,gBAAKX,UAAU,kDAAf,UACE,SAAC,IAAD,CAASL,MAAM,qBAAf,UACE,gBACEiB,QAAS,kBAxEEC,EAwEkBF,EAAOE,QAvE9CC,EAAAA,EAAuB7B,EAAvB,UAAoC8B,EAAAA,GAAAA,EAAAA,SAApC,YAA8DF,IAD1C,IAACA,CAwEF,EACTb,UAAU,yBAFZ,UAIE,gBAAKgB,IAAKC,EAAAA,GAAAA,GAAiBC,IAAI,UAP/B,IAcZ,OAAIxC,GAEA,gBAAKsB,UAAU,iDAAf,UACE,gBAAKkB,IAAI,GAAGF,IAAKG,EAAAA,GAAAA,OAKrB,gBAAKnB,UAAU,MAAf,UACE,gBAAKA,UAAU,SAAf,UACE,SAAC,IAAD,CACEoB,OAAQ,CACNC,WAAY,sBACZC,YAAa,uBACbC,WAAY,qCACZC,aAAa,EACbC,cAAe,UAEjBC,OAAQ,CAAEC,GAAG,GACbjC,QAASA,EACTkC,WAAYpD,OAKrB,C","sources":["pages/Idea/UsersIdea.tsx"],"sourcesContent":["import { Table, Tooltip } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { gifs, icons } from \"../../constants\";\nimport { pathEnum } from \"../../enums\";\nimport { Idea, IdeaTexts } from \"../../enums/idea.enum\";\nimport { routeHelper } from \"../../helpers\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { UserType } from \"../../redux/types/user.types\";\nimport { setIsLoading } from \"../../redux/userSlice/notificationSlice\";\nimport { ideaService } from \"../../service\";\nimport { IdeaType } from \"../../types/idea-service.type\";\n\nconst UsersIdea = () => {\n  const [userIdeas, setUserIdeas] = useState<IdeaType[]>([]);\n  const loading = useAppSelector((state) => state.notification.isLoading);\n\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const getAllIdeas = async () => {\n      try {\n        dispatch(setIsLoading({ isLoading: true }));\n        const { data } = await ideaService.allIdeas();\n        setUserIdeas(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        dispatch(setIsLoading({ isLoading: false }));\n      }\n    };\n    getAllIdeas();\n  }, []);\n\n  const routeIdeaEdit = (id: string) => {\n    routeHelper.navigation(navigate, `${pathEnum.Path.USERIDEA}/${id}`);\n  };\n\n  const columns: ColumnsType<IdeaType> = [\n    {\n      title: \"Tip\",\n      dataIndex: \"type\",\n      key: \"type\",\n      render: (value: Idea) => (\n        <span className=\"text-primary font-semibold\">\n          {IdeaTexts[Idea[value] as never]}\n        </span>\n      ),\n    },\n    {\n      title: \"Konu\",\n      dataIndex: \"subject\",\n      key: \"suject\",\n      render: (value: string) => (\n        <span>\n          {value.length > 18 ? value.substring(0, 15).concat(\"...\") : value}\n        </span>\n      ),\n    },\n    {\n      title: \"Gönderici\",\n      dataIndex: \"userId\",\n      key: \"userId\",\n      render: (value: UserType) => (\n        <span>{value.firstName.concat(\" \", value.lastName)}</span>\n      ),\n    },\n    {\n      title: \"Gönderim Tarihi\",\n      dataIndex: \"createdAt\",\n      key: \"createdAt\",\n      render: (value: Date) => (\n        <span className=\"text-sm text-thirdy\">\n          {moment(value).format(\"DD/MM/YYYY HH:mm\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Yanıt\",\n      dataIndex: \"answer\",\n      key: \"answer\",\n      render: (value: string | null) => (\n        <span> {value ? \"Yanıtlandı\" : \"Yanıtlanmadı\"} </span>\n      ),\n    },\n    {\n      title: \"Yanıt Tarihi\",\n      dataIndex: \"answerAt\",\n      key: \"answerAt\",\n      render: (value: Date | null) => (\n        <div className=\"w-full flex justify-center items-center\">\n          <span>\n            {\" \"}\n            {value ? `${moment(value).format(\"DD/MM/YYYY HH:mm\")}` : \"-\"}{\" \"}\n          </span>\n        </div>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"actions\",\n      key: \"actions\",\n      render: (_, record: IdeaType) => (\n        <div className=\"w-full flex flex-row justify-start items-center\">\n          <Tooltip title=\"Görüntüle\">\n            <div\n              onClick={() => routeIdeaEdit(record.id)}\n              className=\"w-6 h-6 cursor-pointer\"\n            >\n              <img src={icons.open_mail} alt=\"\" />\n            </div>\n          </Tooltip>\n        </div>\n      ),\n    },\n  ];\n  if (loading)\n    return (\n      <div className=\"w-full h-full flex justify-center items-center\">\n        <img alt=\"\" src={gifs.ripple} />\n      </div>\n    );\n\n  return (\n    <div className=\"p-3\">\n      <div className=\"w-full\">\n        <Table\n          locale={{\n            triggerAsc: \"Artan Sıralama\",\n            triggerDesc: \"Azalan Sıralama\",\n            cancelSort: \"Sıralamayı İptal Et\",\n            filterReset: false,\n            filterConfirm: \"Uygula\",\n          }}\n          scroll={{ x: true }}\n          columns={columns}\n          dataSource={userIdeas}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default UsersIdea;\n"],"names":["useState","userIdeas","setUserIdeas","loading","useAppSelector","state","notification","isLoading","dispatch","useAppDispatch","navigate","useNavigate","useEffect","getAllIdeas","setIsLoading","ideaService","data","console","log","columns","title","dataIndex","key","render","value","className","IdeaTexts","Idea","length","substring","concat","firstName","lastName","moment","format","_","record","onClick","id","routeHelper","pathEnum","src","icons","alt","gifs","locale","triggerAsc","triggerDesc","cancelSort","filterReset","filterConfirm","scroll","x","dataSource"],"sourceRoot":""}