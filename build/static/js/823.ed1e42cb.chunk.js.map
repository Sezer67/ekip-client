{"version":3,"file":"static/js/823.ed1e42cb.chunk.js","mappings":"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","sources":["pages/MyCustomerOrders/my-customer-order.config.ts","pages/MyCustomerOrders/MyCustomerOrders.tsx"],"sourcesContent":["export type OrderTableDataTypes = {\n  id: string;\n  name: string;\n  piece: number;\n  customer: string;\n  date: string;\n  answerDate: string | undefined;\n  takings: number;\n  status: StatusType;\n  actions: string;\n};\n\ntype StatusType = \"ONAY BEKLENİYOR\" | \"REDDEDİLDİ\" | \"ONAYLANDI\";\n\nexport type StatusFilterDataTypeForTable = {\n  text: StatusType;\n  value: StatusType;\n}[];\n\nexport const StatusFilterDatas: StatusFilterDataTypeForTable = [\n  {\n    text: \"ONAY BEKLENİYOR\",\n    value: \"ONAY BEKLENİYOR\",\n  },\n  {\n    text: \"ONAYLANDI\",\n    value: \"ONAYLANDI\",\n  },\n  {\n    text: \"REDDEDİLDİ\",\n    value: \"REDDEDİLDİ\",\n  },\n];\n","import { Button, Empty, Table, Tooltip } from \"antd\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { gifs, images } from \"../../constants\";\nimport { convertHelper } from \"../../helpers\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { setOrders } from \"../../redux/productSlice/productSlice\";\nimport {\n  setIsLoading,\n  setNotification,\n} from \"../../redux/userSlice/notificationSlice\";\nimport { setUserPlusBalance } from \"../../redux/userSlice/userSlice\";\nimport { productService } from \"../../service\";\nimport {\n  OrderTableDataTypes,\n  StatusFilterDatas,\n} from \"./my-customer-order.config\";\n\nconst MyCustomerOrders = () => {\n  const [tableDatas, setTableDatas] = useState<OrderTableDataTypes[]>([]);\n  const productState = useAppSelector((state) => state.product);\n  const loading = useAppSelector((state) => state.notification.isLoading);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const getOrders = async () => {\n      try {\n        dispatch(setIsLoading({ isLoading: true }));\n        const { data } = await productService.getMyPendingOrders();\n        dispatch(setOrders(data));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        dispatch(setIsLoading({ isLoading: false }));\n      }\n    };\n    getOrders();\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (productState.orders.length > 0) {\n      const data: OrderTableDataTypes[] = [];\n      productState.orders.forEach((order) => {\n        data.push({\n          id: order.id,\n          actions: \"\",\n          customer: order.customerId.firstName.concat(\n            \" \",\n            order.customerId.lastName\n          ),\n          date: order.createdAt.toString(),\n          answerDate: order.answerAt?.toString(),\n          name: order.productId.name,\n          piece: order.piece,\n          takings: order.piece * order.productId.price,\n          status: order.isAnswer\n            ? order.isAccept\n              ? \"ONAYLANDI\"\n              : \"REDDEDİLDİ\"\n            : \"ONAY BEKLENİYOR\",\n        });\n      });\n      setTableDatas(data);\n    }\n  }, [productState.orders]);\n\n  const handleUpdate = async (isAccept: boolean, id: string) => {\n    try {\n      const { data } = await productService.updateOrderById(id, { isAccept });\n      const orders = convertHelper.convertOrderStateAfterUpdateOrder(\n        data,\n        productState.orders\n      );\n      if (isAccept) {\n        const order = productState.orders.find((o) => o.id === id);\n        if (!order) return;\n        dispatch(\n          setUserPlusBalance({ balance: order.piece * order.productId.price })\n        );\n      }\n      dispatch(setOrders(orders));\n      dispatch(\n        setNotification({\n          message: \"Güncelleme Başarılı\",\n          description: `Sipariş ${isAccept ? \"Onaylandı\" : \"Reddedildi\"}`,\n          isNotification: true,\n          placement: \"top\",\n          status: \"success\",\n        })\n      );\n    } catch (error: any) {\n      dispatch(\n        setNotification({\n          message: \"Güncelleme Başarısız\",\n          description: error.message[0],\n          isNotification: true,\n          placement: \"top\",\n          status: \"error\",\n        })\n      );\n    }\n  };\n\n  const columns: ColumnsType<OrderTableDataTypes> = [\n    {\n      title: \"Ürün Adı\",\n      dataIndex: \"name\",\n      key: \"name\",\n      render: (value: string) => (\n        <span className=\"text-primary text-base font-semibold\">{value}</span>\n      ),\n    },\n    {\n      title: \"Adet\",\n      dataIndex: \"piece\",\n      key: \"piece\",\n      sorter: (a, b) => a.piece - b.piece,\n    },\n    {\n      title: \"Hasılat\",\n      dataIndex: \"takings\",\n      key: \"takings\",\n      render: (value: number) => (\n        <span className=\"font-mono whitespace-nowrap\">{value} ₺</span>\n      ),\n      sorter: (a, b) => a.takings - b.takings,\n    },\n    {\n      title: \"Sipariş Durumu\",\n      dataIndex: \"status\",\n      key: \"status\",\n      filters: StatusFilterDatas,\n      onFilter: (value, record) => record.status === value,\n    },\n    {\n      title: \"Sipariş Tarihi\",\n      dataIndex: \"date\",\n      key: \"date\",\n      render: (value: string) => (\n        <span className=\"font-extrabold\">\n          {moment(value).format(\"DD/MM/YYYY HH:mm\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Müşteri\",\n      dataIndex: \"customer\",\n      key: \"customer\",\n      render: (value) => (\n        <span className=\"text-secondary font-semibold\">{value}</span>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"actions\",\n      key: \"actions\",\n      render: (value, record) => (\n        <div className=\"flex flex-row flex-wrap justify-around\">\n          {record.status !== \"ONAY BEKLENİYOR\" ? (\n            <Tooltip title=\"İşlem Tarihiniz\">\n              <span className=\"font-extrabold\">\n                {moment(record.answerDate).format(\"DD/MM/YYYY HH:mm\")}\n              </span>\n            </Tooltip>\n          ) : (\n            <>\n              <Button\n                onClick={() => handleUpdate(false, record.id)}\n                type=\"primary\"\n                className=\"!bg-red-500 !border-0\"\n              >\n                REDDET\n              </Button>\n              <Button onClick={() => handleUpdate(true, record.id)}>\n                ONAYLA\n              </Button>\n            </>\n          )}\n        </div>\n      ),\n      width: \"25%\",\n    },\n  ];\n  if (loading)\n    return (\n      <div className=\"w-full h-full flex justify-center items-center\">\n        <img alt=\"\" src={gifs.ripple} />\n      </div>\n    );\n\n  return (\n    <div className=\"p-3\">\n      <h3 className=\"text-primary font-bold text-xl\">\n        MÜŞTERİLERİMİN SİPARİŞLERİ\n      </h3>\n      {productState.orders.length > 0 ? (\n        <div className=\"w-full   flex flex-col items-center\">\n          <Table\n            locale={{\n              triggerAsc: \"Artan Sıralama\",\n              triggerDesc: \"Azalan Sıralama\",\n              cancelSort: \"Sıralamayı İptal Et\",\n              filterReset: false,\n              filterConfirm: \"Uygula\",\n            }}\n            scroll={{ x: true }}\n            pagination={false}\n            className=\"w-full\"\n            columns={columns}\n            dataSource={tableDatas}\n          />\n        </div>\n      ) : (\n        <div className=\"mt-5 flex flex-col items-center justify-center\">\n          <Empty\n            description=\"Maalesef Onay Bekleyen Sipariş Yok\"\n            image={images.empty_box}\n            imageStyle={{ width: \"256px\", height: \"256px\" }}\n            style={{\n              fontSize: \"22px\",\n              fontWeight: \"700\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MyCustomerOrders;\n"],"names":["StatusFilterDatas","text","value","useState","tableDatas","setTableDatas","productState","useAppSelector","state","product","loading","notification","isLoading","dispatch","useAppDispatch","useEffect","getOrders","setIsLoading","productService","data","setOrders","console","log","orders","length","forEach","order","push","id","actions","customer","customerId","firstName","concat","lastName","date","createdAt","toString","answerDate","answerAt","name","productId","piece","takings","price","status","isAnswer","isAccept","handleUpdate","convertHelper","find","o","setUserPlusBalance","balance","setNotification","message","description","isNotification","placement","columns","title","dataIndex","key","render","className","sorter","a","b","filters","onFilter","record","moment","format","onClick","type","width","alt","src","gifs","locale","triggerAsc","triggerDesc","cancelSort","filterReset","filterConfirm","scroll","x","pagination","dataSource","image","images","imageStyle","height","style","fontSize","fontWeight","display","flexDirection","alignItems"],"sourceRoot":""}